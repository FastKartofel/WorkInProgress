// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using kol2.Entities;

#nullable disable

namespace kol02.Migrations
{
    [DbContext(typeof(PetDbContext))]
    partial class PetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("kol2.Entities.BreedType", b =>
                {
                    b.Property<int>("IdBreedType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBreedType"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdBreedType")
                        .HasName("BreedType_PK");

                    b.ToTable("BreedTypee", (string)null);

                    b.HasData(
                        new
                        {
                            IdBreedType = 1,
                            Description = "opis1",
                            Name = "Ork"
                        },
                        new
                        {
                            IdBreedType = 2,
                            Description = "opis2",
                            Name = "Elf"
                        },
                        new
                        {
                            IdBreedType = 3,
                            Description = "opis3",
                            Name = "Krasnolud"
                        },
                        new
                        {
                            IdBreedType = 4,
                            Name = "Norbert"
                        });
                });

            modelBuilder.Entity("kol2.Entities.Pet", b =>
                {
                    b.Property<int>("IdPet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPet"));

                    b.Property<DateTime>("ApproximatedDateOfBirth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateAdopted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdBreedType")
                        .HasColumnType("int");

                    b.Property<int>("IsMale")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdPet")
                        .HasName("Pet_PK");

                    b.HasIndex("IdBreedType");

                    b.ToTable("Pet", (string)null);

                    b.HasData(
                        new
                        {
                            IdPet = 1,
                            ApproximatedDateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRegistered = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBreedType = 1,
                            IsMale = 1,
                            Name = "Norbi"
                        },
                        new
                        {
                            IdPet = 2,
                            ApproximatedDateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRegistered = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBreedType = 2,
                            IsMale = 1,
                            Name = "Rex"
                        },
                        new
                        {
                            IdPet = 3,
                            ApproximatedDateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRegistered = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBreedType = 1,
                            IsMale = 1,
                            Name = "Azor"
                        },
                        new
                        {
                            IdPet = 4,
                            ApproximatedDateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRegistered = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBreedType = 3,
                            IsMale = 0,
                            Name = "Ciapka"
                        },
                        new
                        {
                            IdPet = 5,
                            ApproximatedDateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateAdopted = new DateTime(2020, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRegistered = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBreedType = 4,
                            IsMale = 0,
                            Name = "Latka"
                        });
                });

            modelBuilder.Entity("kol2.Entities.Volunteer", b =>
                {
                    b.Property<int>("IdVolunteer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVolunteer"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("IdSupervisor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdVolunteer")
                        .HasName("Volunteer_PK");

                    b.HasIndex("IdSupervisor");

                    b.ToTable("Volunteer", (string)null);

                    b.HasData(
                        new
                        {
                            IdVolunteer = 1,
                            Address = "adres1",
                            Email = "email1",
                            Name = "imie1",
                            Phone = "3092385029",
                            StartingDate = new DateTime(2000, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "nazwisko1"
                        },
                        new
                        {
                            IdVolunteer = 2,
                            Address = "adres2",
                            Email = "email2",
                            Name = "imie2",
                            Phone = "352005938209",
                            StartingDate = new DateTime(2003, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "nazwisko2"
                        },
                        new
                        {
                            IdVolunteer = 3,
                            Address = "adres3",
                            Email = "email3",
                            Name = "imie3",
                            Phone = "984209093304",
                            StartingDate = new DateTime(2002, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "nazwisko3"
                        },
                        new
                        {
                            IdVolunteer = 4,
                            Address = "adres4",
                            Email = "email4",
                            IdSupervisor = 1,
                            Name = "imie4",
                            Phone = "7283479823",
                            StartingDate = new DateTime(2004, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "nazwisko4"
                        });
                });

            modelBuilder.Entity("kol2.Entities.VolunteerPet", b =>
                {
                    b.Property<int>("IdPet")
                        .HasColumnType("int");

                    b.Property<int>("IdVolunteer")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("IdPet", "IdVolunteer")
                        .HasName("VolunteerPet_PK");

                    b.HasIndex("IdVolunteer");

                    b.ToTable("VolunteerPet", (string)null);
                });

            modelBuilder.Entity("kol2.Entities.Pet", b =>
                {
                    b.HasOne("kol2.Entities.BreedType", "BreedType")
                        .WithMany("Pets")
                        .HasForeignKey("IdBreedType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Pet_BreedType");

                    b.Navigation("BreedType");
                });

            modelBuilder.Entity("kol2.Entities.Volunteer", b =>
                {
                    b.HasOne("kol2.Entities.Volunteer", "Supervisor")
                        .WithMany("Volunteers")
                        .HasForeignKey("IdSupervisor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Volunteer_Volunteer");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("kol2.Entities.VolunteerPet", b =>
                {
                    b.HasOne("kol2.Entities.Pet", "Pet")
                        .WithMany("VolunteerPets")
                        .HasForeignKey("IdPet")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("VolunteerPet_Pet");

                    b.HasOne("kol2.Entities.Volunteer", "Volunteer")
                        .WithMany("VolunteerPets")
                        .HasForeignKey("IdVolunteer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("VolunteerPet_Volunteer");

                    b.Navigation("Pet");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("kol2.Entities.BreedType", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("kol2.Entities.Pet", b =>
                {
                    b.Navigation("VolunteerPets");
                });

            modelBuilder.Entity("kol2.Entities.Volunteer", b =>
                {
                    b.Navigation("VolunteerPets");

                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
