// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test2Proba.Models;

#nullable disable

namespace test2Proba.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20230528133430_initialMigration222")]
    partial class initialMigration222
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("test2Proba.Models.BreedType", b =>
                {
                    b.Property<int>("IdBreedType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBreedType"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBreedType");

                    b.ToTable("BreedType");

                    b.HasData(
                        new
                        {
                            IdBreedType = 1,
                            Description = "This is Breed 1",
                            Name = "Breed1"
                        },
                        new
                        {
                            IdBreedType = 2,
                            Description = "This is Breed 2",
                            Name = "Breed2"
                        });
                });

            modelBuilder.Entity("test2Proba.Models.Pet", b =>
                {
                    b.Property<int>("IdPet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPet"));

                    b.Property<DateTime>("ApproximateDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("BreedTypeIdBreedType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdopted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBreedType")
                        .HasColumnType("int");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPet");

                    b.HasIndex("BreedTypeIdBreedType");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("test2Proba.Models.Volunteer", b =>
                {
                    b.Property<int>("IdVolunteer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVolunteer"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdSupervisor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdVolunteer");

                    b.HasIndex("IdSupervisor");

                    b.ToTable("Volunteers");

                    b.HasData(
                        new
                        {
                            IdVolunteer = 1,
                            Address = "Address 1",
                            Email = "john@example.com",
                            Name = "John",
                            Phone = "+1234567890",
                            StartingDate = new DateTime(2023, 5, 28, 15, 34, 30, 777, DateTimeKind.Local).AddTicks(4481),
                            Surname = "Doe"
                        },
                        new
                        {
                            IdVolunteer = 2,
                            Address = "Address 2",
                            Email = "jane@example.com",
                            IdSupervisor = 1,
                            Name = "Jane",
                            Phone = "+0987654321",
                            StartingDate = new DateTime(2023, 5, 28, 15, 34, 30, 777, DateTimeKind.Local).AddTicks(4517),
                            Surname = "Doe"
                        });
                });

            modelBuilder.Entity("test2Proba.Models.VolunteerPet", b =>
                {
                    b.Property<int>("IdVolunteer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVolunteer"));

                    b.Property<DateTime>("DateAccepted")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPet")
                        .HasColumnType("int");

                    b.Property<int>("PetIdPet")
                        .HasColumnType("int");

                    b.Property<int>("VolunteerIdVolunteer")
                        .HasColumnType("int");

                    b.HasKey("IdVolunteer");

                    b.HasIndex("PetIdPet");

                    b.HasIndex("VolunteerIdVolunteer");

                    b.ToTable("VolunteerPets");
                });

            modelBuilder.Entity("test2Proba.Models.Pet", b =>
                {
                    b.HasOne("test2Proba.Models.BreedType", "BreedType")
                        .WithMany("Pets")
                        .HasForeignKey("BreedTypeIdBreedType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BreedType");
                });

            modelBuilder.Entity("test2Proba.Models.Volunteer", b =>
                {
                    b.HasOne("test2Proba.Models.Volunteer", "Supervisor")
                        .WithMany("Subordinates")
                        .HasForeignKey("IdSupervisor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("test2Proba.Models.VolunteerPet", b =>
                {
                    b.HasOne("test2Proba.Models.Pet", "Pet")
                        .WithMany("VolunteerPets")
                        .HasForeignKey("PetIdPet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test2Proba.Models.Volunteer", "Volunteer")
                        .WithMany("VolunteerPets")
                        .HasForeignKey("VolunteerIdVolunteer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("test2Proba.Models.BreedType", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("test2Proba.Models.Pet", b =>
                {
                    b.Navigation("VolunteerPets");
                });

            modelBuilder.Entity("test2Proba.Models.Volunteer", b =>
                {
                    b.Navigation("Subordinates");

                    b.Navigation("VolunteerPets");
                });
#pragma warning restore 612, 618
        }
    }
}
